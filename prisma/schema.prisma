// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Submission    Submission[]
    SmashEntries  SmashEntry[]
    RankEntry     RankEntry[]
    Tierlist      Tierlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Submission {
    id           String           @id @default(cuid())
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    name         String
    game         String
    image        String
    status       SubmissionStatus @default(PENDING)
    author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    SmashEntries SmashEntry[]
    RankEntry    RankEntry[]

    @@index([authorId])
}

enum SubmissionStatus {
    PENDING
    APPROVED
    REJECTED
}

model SmashEntry {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    vote         SmashVote
    type         SmashType?
    authorId     String
    author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    submissionId String
    submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    @@unique([authorId, submissionId])
    @@index([authorId])
    @@index([submissionId])
}

enum SmashVote {
    SMASH
    PASS
}

enum SmashType {
    BOTTOM
    TOP
    VERSE
}

model Tierlist {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    ranks     TierlistRank[]
    authorId  String
    author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@unique([authorId])
    @@index([authorId])
}

model TierlistRank {
    id         String      @id @default(cuid())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    name       String
    order      Int
    tierlistId String
    tierlist   Tierlist    @relation(fields: [tierlistId], references: [id], onDelete: Cascade)
    entries    RankEntry[]

    @@index([tierlistId])
}

model RankEntry {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    rankId         String
    rank           TierlistRank @relation(fields: [tierlistRankId], references: [id], onDelete: Cascade)
    index          Int
    authorId       String
    author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
    submissionId   String
    submission     Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    tierlistRankId String

    @@unique([authorId, submissionId])
    @@index([authorId])
    @@index([submissionId])
    @@index([tierlistRankId])
}
